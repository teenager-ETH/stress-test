version: "3.7"

services:
  drone-server:
    image: drone/drone:2.0.0
    container_name: drone-server
    hostname: drone-server
    networks:
      - drone_network
    ports:
      - 80:80
      - 443:443 
    restart: always
    environment:
      - DRONE_OPEN=true
      - DRONE_DEBUG=true
      - DRONE_GITHUB_CLIENT_ID
      - DRONE_GITHUB_CLIENT_SECRET
      - DRONE_USER_CREATE=username:admin,machine:false,admin:true
      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgres://drone:${POSTGRES_PASSWORD}@drone-database:5432/drone?sslmode=disable
      - DRONE_RPC_SECRET
      - DRONE_SERVER_HOST
      - DRONE_SERVER_PROTO
      - DRONE_LOGS_DEBUG=true
      - DRONE_LOGS_TRACE=true
      - DRONE_LOGS_PRETTY=true
    depends_on:
      - drone-database

  drone-database:
    image: postgres:alpine
    container_name: drone-database
    networks:
      - drone-network
    restart: always
    volumes:
      - drone_data/:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=drone
      - POSTGRES_USER=drone
      - POSTGRES_PASSWORD

  drone-runner:
    image: drone/drone-runner-docker
    container_name: drone-runner
    hostname: drone-runner
    networks:
      - drone_network
    restart: always
    ports:
      - 3000:3000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_HOST
      - DRONE_RPC_PROTO
      - DRONE_RPC_SECRET
      - DRONE_RUNNER_CAPACITY=1
      - DRONE_RUNNER_NAME=drone_network
      - DRONE_RUNNER_NETWORKS=drone_network
      - DRONE_DEBUG=true
      - DRONE_TRACE=true

volumes:
  drone-data:
    external: true

networks:
  drone_network:
    name: drone_network